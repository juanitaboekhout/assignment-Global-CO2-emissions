import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy.polynomial.polynomial as poly  

vraag 1: What is the biggest predictor of a large CO2 output per capita of a country?

Hiervoor kijk ik naar de correlatie tussen co2 uitstoot en predictors. Waarbij ik kijk naar welke predictor de grootste correlatie heeft dus het meeste leidt tot CO2 uitstoot.
#vraag 1: What is the biggest predictor of a large CO2 output per capita of a country?

predictor = pd.read_csv('/content/owid-co2-data.csv') 
predictor.head()

predictor.columns

#World eruit halen om op landniveau te bekijken
predictor_co2 = predictor.loc[(predictor.country != 'World')]
predictor_co2.head()

#Correlatie berekenen over alle factoren / predictors, dus over het hele dataframe om een algemeen beeld te vormen en zo alle mogelijke predictors mee te kunnen nemen en te zien welke echt de beste is
correlation_predictor_co2 = predictor_co2.dropna().corr()
correlation_predictor_co2

Conclusie: wanneer ik de correlatie algemeen bekijk heeft primary energy consumption de hoogste correlatie met CO2 uitstoot (0.996071) dus is een goede voorspeller van CO2 uitstoot en t.o.v. de andere predictors de beste predictor. Hierna komt gdp. In de opdracht wordt specifiek gevraagd naar CO2 per capita. ghg_excluding_lucf_per_capita heeft hierbij de grootste correlatie met CO2 per capita t.o.v. de andere predictors (0.913186) waarna ook energy per capita een hoge correlatie heeft.

#Vanuit mijn interesse - achtergrond en om het wat diepgaander te bekijken wil ik nog apart belichten wat de beste predictor is tussen energie, populatie en gdp. 
multiple_predictors = predictor_co2[['country','co2', 'co2_per_capita', 'gdp','energy_per_capita','primary_energy_consumption','population']]
multiple_predictors

correlation_multiple_predictors = multiple_predictors.dropna().corr()
correlation_multiple_predictors

Energie heeft de grootste correlatie met CO2 en is de grootste predictor vergeleken met populatie en gdp. Zowel energy_per_capita als primary_energy_consumption hebben de hoogste correlatie. Dus energie heeft in totaal gezien de grootste invloed op CO2 uitstoot.

# grafiek vraag 1
fig, ax = plt.subplots()
years = list(em_sector_world["Year"])
sectorNames = list(em_sector_world.columns[2:10])
sectorEmissions = em_sector_world.iloc[:,2:10]

ax.plot(years, sectorEmissions)
plt.title("Emission per sector")
plt.xlabel("Year")
plt.ylabel("CO2_emission")
plt.legend(sectorNames, loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

#conclusie vraag 1
#Voor deze vraag heb ik sectoren vergeleken en gekeken welke sector de meeste CO2 uitstoot geeft.
#Electriciteit en verwarming geven de meeste CO2 uitstoot ten opzichte van de andere sectoren in de vergelijking.
#Hierna is transport de sector die de meeste CO2 uitstoot geeft.

#Vraag 2:which countries are making the biggest strides in decreasing CO2 output?

biggest_strides_co2 = pd.read_csv('/content/co-emissions-per-capita.csv')
biggest_strides_co2

biggest_strides_2000_2020 = biggest_strides_co2.loc[(biggest_strides_co2.Year == 2000) |(biggest_strides_co2.Year == 2020)]
biggest_strides_2000_2020

pivot = biggest_strides_2000_2020.pivot(index='Entity',columns='Year',values='Annual CO2 emissions (per capita)').reset_index()
pivot

pivot.columns = ['country', '_2000', '_2020']
pivot

pivot['change'] = pivot._2020 / pivot._2000 * 100
pivot

biggest_strides_2000_2020 = pivot.sort_values(by=["change"], ascending=True)
biggest_strides_2000_2020.head(5)

#conclusie vraag 2:
# Aruba heeft de minste toename gehad in co2 uitstoot tussen 2000 en 2020, terwijl andere landen veel meer gestegen zijn in co2 uitstoot 
#dus is het land wat het beste resultaat heeft bereikt
#hierna hebben Noord Korea, Yemen, Arabische Emiraten en dan Denemarken de minste toename in co2 bereikt.

#3:Which non-fossil fuel energy technology will have the best price in the future?

levelized_costs = pd.read_csv('/content/levelized-cost-of-energy.csv') 
levelized_costs.head()

levelized_costs.drop(['Code','CSP LCOE (2019 USD/kWh)','Geothermal LCOE (2019 USD/kWh)'],axis=1, inplace = True)

levelized_costs.head()

renewables_2010_2020 = levelized_costs[levelized_costs['Year'] >= 2010].sort_values(by=["Year"], ascending=False)
renewables_2010_2020.head()

# grafiek vraag 3
sectorRenewable = list(renewables_2010_2020.columns[2:7])
sectorPrice = renewables_2010_2020.iloc[:,2:7]

fig, ax = plt.subplots()
world = renewables_2010_2020[renewables_2010_2020["Entity"]=="World"]
world.drop(["Entity"], inplace = True, axis = 1)
world.set_index("Year", inplace = True)
ax.plot(world)
plt.title("Price renewables per sector")
plt.xlabel("Year")
plt.ylabel("Price")
plt.legend(sectorRenewable, loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

#Hydro
X = np.array(world.index).reshape(-1,1)
y = world['Hydro LCOE (2019 USD/kWh)']

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression() 
linear_regressor.fit(X, y)  

years = np.arange(2010, 2031).reshape(-1,1)    
predicted_prices = linear_regressor.predict(years)   
fig,ax = plt.subplots()                                
plt.plot(X,y)                                          
plt.plot(years, predicted_prices)
plt.title("Hydro energy")
plt.xlabel("Year")
plt.ylabel("Price")
plt.grid()
plt.show()

#Solar
X = np.array(world.index).reshape(-1,1)
y = world['Solar LCOE (2019 USD/kWh)']

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression() 
linear_regressor.fit(X, y)  

years = np.arange(2010, 2031).reshape(-1,1)    
predicted_prices = linear_regressor.predict(years)   
fig,ax = plt.subplots()                                
plt.plot(X,y)                                          
plt.plot(years, predicted_prices)
plt.title("Solar energy")
plt.xlabel("Year")
plt.ylabel("Price")
plt.grid()
plt.show()
#Onshore wind 
X = np.array(world.index).reshape(-1,1)
y = world['Onshore wind LCOE (2019 USD/kWh)']

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression() 
linear_regressor.fit(X, y)  

years = np.arange(2010, 2031).reshape(-1,1)    
predicted_prices = linear_regressor.predict(years)   
fig,ax = plt.subplots()                                
plt.plot(X,y)                                          
plt.plot(years, predicted_prices)
plt.title("Onshore wind energy")
plt.xlabel("Year")
plt.ylabel("Price")
plt.grid()
plt.show()

#Bioenergy
X = np.array(world.index).reshape(-1,1)
y = world['Bioenergy LCOE (2019 USD/kWh)']

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression() 
linear_regressor.fit(X, y)  

years = np.arange(2010, 2031).reshape(-1,1)    
predicted_prices = linear_regressor.predict(years)   
fig,ax = plt.subplots()                                
plt.plot(X,y)                                          
plt.plot(years, predicted_prices)
plt.title("Bio energy")
plt.xlabel("Year")
plt.ylabel("Price")
plt.grid()
plt.show()

#Offshore wind
X = np.array(world.index).reshape(-1,1)
y = world['Offshore wind LCOE (2019 USD/kWh)']

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression() 
linear_regressor.fit(X, y)  

years = np.arange(2010, 2031).reshape(-1,1)    
predicted_prices = linear_regressor.predict(years)   
fig,ax = plt.subplots()                                
plt.plot(X,y)                                          
plt.plot(years, predicted_prices)
plt.title("Offshore wind energy")
plt.xlabel("Year")
plt.ylabel("Price")
plt.grid()
plt.show()

#Conclusie vraag 3: Which non-fossil fuel energy technology will have the best price in the future?
#In de eerste grafiek waarbij alle soorten renewables in een keer te zien zijn zie je dat solar energie snel omlaag gaat. 
#Om lineaire regressie goed zichtbaar te maken, heb ik aparte grafieken gemaakt per soort renewable waardoor het verloop van de regressielijn op alle onderdelen goed te zien is.
#In de losse grafieken zie je ook dat solar energie het snelst omlaag gaat in prijs en het snelst onder 0 gaat. Solar energie zal dus de beste prijs hebben in de toekomst.
